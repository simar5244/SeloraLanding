---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Get Started - Selora" showHeader={false}>
  <main class="min-h-screen bg-white">
    <!-- Main container -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-screen flex flex-col">
      <!-- Spacer to maintain vertical position -->
      <div class="h-24"></div>

      <!-- Step 1: Company Name -->
      <div id="step-1" class="flex flex-col md:flex-row min-h-screen">
        <!-- Left side: Form -->
        <div class="w-full md:w-1/2 flex items-center justify-center p-8 md:p-12 lg:p-16">
          <div class="w-full max-w-md">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900 leading-tight mb-6">
              Welcome to <span class="text-indigo-600">Selora</span>
            </h1>
            <p class="text-lg text-gray-600 mb-8">
              Let's get your company set up with AI-powered workforce analytics
            </p>
            
            <div class="space-y-6">
              <div>
                <label for="company-name" class="block text-sm font-medium text-gray-700 mb-1.5">
                  What's your company name?
                </label>
                <div class="relative">
                  <input 
                    type="text" 
                    id="company-name"
                    class="w-full px-4 py-3 text-base border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all bg-white placeholder-gray-400 text-gray-900"
                    placeholder="Enter company name"
                  />
                </div>
              </div>
              
              <div class="pt-2">
                <button
                  id="step-1-next"
                  disabled
                  class="w-full flex items-center justify-center px-8 py-4 border border-transparent text-base font-medium rounded-lg text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 transition-all duration-200 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                >
                  Get Started
                  <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Right side: Image -->
        <div class="hidden md:block md:w-1/2 bg-gray-50">
          <img 
            src="/images/onboarding-team.jpg" 
            alt="Team collaboration" 
            class="w-full h-full object-cover"
          />
        </div>
      </div>

      <!-- Step 2: Team Size -->
      <div id="step-2" class="hidden min-h-screen w-full">
        <div class="flex flex-col md:flex-row h-full">
          <!-- Left side: Form -->
          <div class="w-full md:w-1/2 flex items-center justify-center p-8 md:p-12 lg:p-16">
            <div class="w-full max-w-md">
              <h2 class="text-3xl font-bold text-gray-900 mb-2 text-center md:text-left">
                Team Size
              </h2>
              <p class="text-gray-600 mb-8 text-center md:text-left">
                How many people are in your company?
              </p>
            
            <div class="space-y-4">
              <label class="flex items-center p-5 border border-gray-200 rounded-lg hover:border-indigo-300 cursor-pointer transition-colors hover:bg-gray-50">
                <input type="radio" name="team-size" value="1-20" class="h-5 w-5 text-indigo-600 focus:ring-indigo-500 border-gray-300">
                <span class="ml-4 text-gray-700">1-20 employees</span>
              </label>
              
              <label class="flex items-center p-5 border border-gray-200 rounded-lg hover:border-indigo-300 cursor-pointer transition-colors hover:bg-gray-50">
                <input type="radio" name="team-size" value="20-100" class="h-5 w-5 text-indigo-600 focus:ring-indigo-500 border-gray-300">
                <span class="ml-4 text-gray-700">20-100 employees</span>
              </label>
              
              <label class="flex items-center p-5 border border-gray-200 rounded-lg hover:border-indigo-300 cursor-pointer transition-colors hover:bg-gray-50">
                <input type="radio" name="team-size" value="100+" class="h-5 w-5 text-indigo-600 focus:ring-indigo-500 border-gray-300">
                <span class="ml-4 text-gray-700">100+ employees</span>
              </label>
            </div>
            
            <div class="flex justify-between pt-8">
              <button 
                id="back-to-step1"
                class="px-6 py-3 text-gray-600 hover:text-gray-900 font-medium transition-colors flex items-center hover:bg-gray-100 rounded-lg"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Back
              </button>
              
              <button 
                id="step-2-next"
                disabled
                class="px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white font-medium rounded-lg transition-colors flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Continue to Email Collection
                <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
              </div>
            </div>
          </div>
          
          <!-- Right side: Image -->
          <div class="hidden md:flex md:w-1/2 bg-gray-50 overflow-hidden">
            <img 
              src="/images/workforce-analytics.jpg" 
              alt="Workforce analytics" 
              class="w-full h-full object-cover"
            />
          </div>
        </div>
      </div>

      <!-- Step 3: Email Collection -->
      <div id="step-3" class="hidden min-h-screen w-full">
        <div class="flex flex-col md:flex-row h-full">
          <!-- Left side: Form -->
          <div class="w-full md:w-1/2 flex items-center justify-center p-8 md:p-12 lg:p-16">
            <div class="w-full max-w-md">
              <h2 class="text-3xl font-bold text-gray-900 mb-2 text-center md:text-left">
                Contact Information
              </h2>
              <p class="text-gray-600 mb-8 text-center md:text-left">
                We'll use this to send you important updates about your account.
              </p>
            
              <div class="space-y-6">
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                  <input 
                    type="email" 
                    id="email" 
                    name="email"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="you@company.com"
                  >
                  <p class="mt-1 text-sm text-gray-500">We'll never share your email with anyone else.</p>
                </div>
              
                <div class="flex justify-between pt-4">
                  <button 
                    id="back-to-step-2"
                    type="button"
                    class="px-6 py-3 text-gray-600 hover:text-gray-900 font-medium transition-colors flex items-center hover:bg-gray-100 rounded-lg"
                  >
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Back
                  </button>
                  
                  <button 
                    id="step-3-next"
                    type="button"
                    class="px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white font-medium rounded-lg transition-colors flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled
                  >
                    Continue to Plans
                    <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Right side: Image -->
          <div class="hidden md:flex md:w-1/2 bg-gray-50 overflow-hidden">
            <img 
              src="/images/email-illustration.jpg" 
              alt="Contact Information" 
              class="w-full h-full object-cover"
            />
          </div>
        </div>
      </div>

      <!-- Step 4: Pricing Plans (Full Page) -->
      <div id="step-4" class="hidden fixed inset-0 bg-white z-20 overflow-y-auto">
        <div class="min-h-screen w-full pt-16 pb-12 px-4 sm:px-6 lg:px-8">
          <div class="max-w-6xl mx-auto">
          <div class="text-center mb-12">
            <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Choose Your Plan
            </h2>
            <p class="text-lg text-gray-600 max-w-2xl mx-auto mb-8">
              Select the perfect plan for your needs. You can always change it later.
            </p>
            
            <!-- Billing Toggle -->
            <div class="flex items-center justify-center space-x-4 mb-12">
              <span class="text-sm font-medium text-gray-700">Billed Monthly</span>
              <button id="billing-toggle" type="button" class="relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-indigo-200 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" role="switch" aria-checked="false">
                <span class="sr-only">Toggle billing</span>
                <span id="toggle-dot" class="pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out translate-x-0"></span>
              </button>
              <div class="flex flex-col">
                <span class="text-sm font-medium text-gray-700">Billed Annually</span>
                <span class="text-xs text-indigo-600">Save 17%</span>
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto h-full">
            <!-- Starter Plan -->
            <div class="plan-card flex flex-col h-full bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-200 hover:border-indigo-300 transition-all duration-300 transform hover:-translate-y-1" data-plan="starter">
              <div class="p-8 h-full flex flex-col justify-between">
                <div>
                  <h3 class="text-2xl font-bold text-gray-900">Starter</h3>
                  <p class="text-gray-600 mt-2">Perfect for individuals</p>
                </div>
                
                <div class="mt-6">
                  <div class="flex items-baseline">
                    <span class="text-4xl font-extrabold text-gray-900 monthly-price">$100</span>
                    <span class="text-4xl font-extrabold text-gray-900 hidden yearly-price">$83</span>
                    <span class="ml-1 text-lg font-medium text-gray-500">/month</span>
                  </div>
                  <p class="mt-1 text-sm text-gray-500">
                    <span class="monthly-price">Billed monthly at $100</span>
                    <span class="yearly-price hidden">Billed annually at $1,000</span>
                  </p>
                </div>
                
                <ul class="mt-8 space-y-4">
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">20 Users</span>
                  </li>
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">Email and Call Support</span>
                  </li>
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">DIY Onboarding</span>
                  </li>
                </ul>
                
                <button class="mt-8 w-full flex justify-center py-3 px-6 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  Get Started
                </button>
              </div>
            </div>
            
            <!-- Standard Plan -->
            <div class="plan-card flex flex-col h-full bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-200 hover:border-indigo-300 transition-all duration-300 transform hover:-translate-y-1" data-plan="standard">
              <div class="p-8 h-full flex flex-col justify-between">
                <div>
                  <h3 class="text-2xl font-bold text-gray-900">Standard</h3>
                  <p class="text-gray-600 mt-2">Ideal for small teams</p>
                </div>
                
                <div class="mt-6">
                  <div class="flex items-baseline">
                    <span class="text-4xl font-extrabold text-gray-900 monthly-price">$200</span>
                    <span class="text-4xl font-extrabold text-gray-900 hidden yearly-price">$167</span>
                    <span class="ml-1 text-lg font-medium text-gray-500">/month</span>
                  </div>
                  <p class="mt-1 text-sm text-gray-500">
                    <span class="monthly-price">Billed monthly at $200</span>
                    <span class="yearly-price hidden">Billed annually at $2,000</span>
                  </p>
                </div>
                
                <ul class="mt-8 space-y-4">
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">Up to 100 Users</span>
                  </li>
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">24/7 Priority Support</span>
                  </li>
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">DIY Onboarding</span>
                  </li>
                </ul>
                
                <button class="mt-8 w-full flex justify-center py-3 px-6 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  Get Started
                </button>
              </div>
            </div>
            
            <!-- Enterprise Plan -->
            <div class="plan-card flex flex-col h-full bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-200 hover:border-indigo-300 transition-all duration-300 transform hover:-translate-y-1" data-plan="enterprise">
              <div class="p-8 h-full flex flex-col justify-between">
                <div>
                  <h3 class="text-2xl font-bold text-gray-900">Enterprise</h3>
                  <p class="text-gray-600 mt-2">For growing businesses</p>
                </div>
                
                <div class="mt-6">
                  <div class="flex items-baseline">
                    <span class="text-4xl font-extrabold text-gray-900 monthly-price">$300</span>
                    <span class="text-4xl font-extrabold text-gray-900 hidden yearly-price">$250</span>
                    <span class="ml-1 text-lg font-medium text-gray-500">/month</span>
                  </div>
                  <p class="mt-1 text-sm text-gray-500">
                    <span class="monthly-price">Billed monthly at $300</span>
                    <span class="yearly-price hidden">Billed annually at $3,000</span>
                  </p>
                </div>
                
                <ul class="mt-8 space-y-4">
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">100+ Users</span>
                  </li>
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">24/7 Priority Support</span>
                  </li>
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">Dedicated Account Manager</span>
                  </li>
                  <li class="flex items-center">
                    <svg class="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="ml-3 text-gray-700">White Glove Onboarding</span>
                  </li>
                </ul>
                
                <button class="mt-8 w-full flex justify-center py-3 px-6 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  Get Started
                </button>
              </div>
            </div>
          </div>
          
          <div class="mt-12 text-center">
            <p class="text-gray-500">Need a custom plan? <a href="#" class="text-indigo-600 hover:text-indigo-800 font-medium">Contact our sales team</a></p>
          </div>
        </div>
      </div>

      <script>
        // Store onboarding data
        const onboardingData = {
          companyName: '',
          teamSize: null,
          selectedPlan: null,
          email: ''
        };

        // Step 1: Company Name
        const step1Next = document.getElementById('step-1-next');
        
        if (step1Next) {
          step1Next.addEventListener('click', () => {
            const companyName = document.getElementById('company-name').value.trim();
            if (companyName) {
              onboardingData.companyName = companyName;
              document.getElementById('step-1').classList.add('hidden');
              document.getElementById('step-2').classList.remove('hidden');
              document.getElementById('company-display').textContent = companyName;
              document.getElementById('company-display-2').textContent = companyName;
            }
          });
        }
        
        // Step 2: Team Size
        const teamSizeRadios = document.querySelectorAll('input[name="team-size"]');
        const step2Next = document.getElementById('step-2-next');
        
        teamSizeRadios.forEach(radio => {
          radio.addEventListener('change', () => {
            onboardingData.teamSize = radio.value;
            if (step2Next) step2Next.disabled = false;
          });
        });
        
        if (step2Next) {
          step2Next.addEventListener('click', () => {
            document.getElementById('step-2').classList.add('hidden');
            document.getElementById('step-3').classList.remove('hidden');
          });
        }
        
        // Back to Step 2
        const backToStep2 = document.getElementById('back-to-step-2');
        if (backToStep2) {
          backToStep2.addEventListener('click', () => {
            document.getElementById('step-3').classList.add('hidden');
            document.getElementById('step-2').classList.remove('hidden');
          });
        }
        
        // Plan Selection
        const planButtons = document.querySelectorAll('[data-plan]');
        
        planButtons.forEach(button => {
          button.addEventListener('click', () => {
            // Remove selection from all buttons
            planButtons.forEach(btn => {
              btn.classList.remove('ring-2', 'ring-indigo-500');
            });
            
            // Add selection to clicked button
            button.classList.add('ring-2', 'ring-indigo-500');
            
            // Store selected plan
            onboardingData.selectedPlan = button.dataset.plan;
            
            // Enable complete signup button if on step 3
            const completeSignupBtn = document.getElementById('complete-signup');
            if (completeSignupBtn) {
              completeSignupBtn.disabled = false;
            }
          });
        });
        
        // Complete Signup
        function completeSignup() {
          if (!onboardingData.selectedPlan) return;
          
          // Here you would typically send the data to your backend
          console.log('Onboarding completed with data:', onboardingData);
          
          // Redirect to appropriate URL based on selected plan
          const planUrls = {
            'starter': 'https://app.selora.ai/signup/starter',
            'standard': 'https://app.selora.ai/signup/standard',
            'enterprise': 'https://app.selora.ai/contact-sales'
          };
          
          window.location.href = planUrls[onboardingData.selectedPlan] || 'https://app.selora.ai';
        }
        
        // Billing Toggle
        document.getElementById('billing-toggle')?.addEventListener('click', function() {
          const isYearly = this.getAttribute('aria-checked') === 'true';
          this.setAttribute('aria-checked', !isYearly);
          document.getElementById('toggle-dot').classList.toggle('translate-x-5', !isYearly);
          
          // Toggle price display
          document.querySelectorAll('.monthly-price, .yearly-price').forEach(el => {
            el.classList.toggle('hidden');
          });
        });
        
        // Highlight recommended plan based on team size
        function highlightRecommendedPlan(teamSize) {
          let recommendedPlan = 'starter';
          
          if (teamSize === '1-20') {
            recommendedPlan = 'starter';
          } else if (teamSize === '20-100') {
            recommendedPlan = 'standard';
          } else if (teamSize === '100+') {
            recommendedPlan = 'enterprise';
          }
          
          // Remove highlight from all plans
          document.querySelectorAll('[data-plan]').forEach(plan => {
            plan.classList.remove('ring-2', 'ring-indigo-500');
          });
          
          // Highlight recommended plan
          const planToHighlight = document.querySelector(`[data-plan="${recommendedPlan}"]`);
          if (planToHighlight) {
            planToHighlight.classList.add('ring-2', 'ring-indigo-500');
            planToHighlight.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }
        
        // Update team size selection to highlight recommended plan
        teamSizeRadios.forEach(radio => {
          radio.addEventListener('change', () => {
            highlightRecommendedPlan(radio.value);
          });
        });
        
        // Initialize with monthly pricing by default
        document.addEventListener('DOMContentLoaded', () => {
          // If we have a team size selected, highlight the recommended plan
          if (onboardingData.teamSize) {
            highlightRecommendedPlan(onboardingData.teamSize);
          }
        });
      </script>
      
      <style>
        /* Custom scrollbar */
        ::-webkit-scrollbar {
          width: 6px;
          height: 6px;
        }
        
        ::-webkit-scrollbar-track {
          background: #f1f1f1;
        }
        
        ::-webkit-scrollbar-thumb {
          background: #9333ea;
          border-radius: 3px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
          background: #7e22ce;
        }
        
        /* Smooth transitions */
        .transition-all {
          transition-property: all;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-duration: 200ms;
        }
        
        /* Custom focus styles */
        .focus-visible {
          outline: 2px solid #9333ea;
          outline-offset: 2px;
          box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.2);
        }
      </style>

      <style>
        /* Add subtle animation for step transitions */
        [id^="step-"] {
          animation: fadeIn 0.3s ease-out forwards;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        /* Custom background grid */
        .bg-grid-slate-100/50 {
          background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke='rgb(226 232 240 / 0.5)'%3e%3cpath d='M0 .5H31.5V32'/%3e%3c/svg%3e");
        }
      </style>
    </div>
  </main>
</Layout>

<style>
  .onboarding-step {
    opacity: 1;
    transform: translateX(0);
    transition: all 0.5s ease-in-out;
  }
  
  .onboarding-step.hidden {
    opacity: 0;
    transform: translateX(100px);
    pointer-events: none;
  }
  
  .onboarding-step.slide-out {
    opacity: 0;
    transform: translateX(-100px);
    pointer-events: none;
  }
  
  .team-size-option.selected {
    border-color: #8b5cf6;
    background-color: #f3f4f6;
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }
  
  .team-size-option.selected .w-4 {
    background-color: #8b5cf6;
    border-color: #8b5cf6;
    position: relative;
  }
  
  .team-size-option.selected .w-4::after {
    content: '';
    width: 8px;
    height: 8px;
    background-color: white;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  
  .pricing-card.dimmed {
    opacity: 0.5;
    transform: scale(0.95);
    filter: blur(1px);
  }
  
  .pricing-card.highlighted {
    opacity: 1;
    transform: scale(1.05);
    box-shadow: 0 25px 50px -12px rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }
  
  .pricing-card {
    min-height: 600px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const step1Next = document.getElementById('step-1-next');
    const step2Next = document.getElementById('step-2-next');
    const companyNameInput = document.getElementById('company-name');
    const companyDisplay = document.getElementById('company-display');
    const companyDisplay2 = document.getElementById('company-display-2');
    const progressBar = document.getElementById('progress-bar');
    const currentStepDisplay = document.getElementById('current-step');
    const stepTitle = document.getElementById('step-title');
    
    // State
    let currentStep = 1;
    let companyName = '';
    let teamSize = '';
    let selectedPlan = '';
    
    // Initialize UI
    function initUI() {
      // Get DOM elements
      const teamSizeOptions = document.querySelectorAll('.team-size-option');
      const planSelectBtns = document.querySelectorAll('.plan-select-btn');
      // Set initial state
      step1Next.disabled = true;
      step2Next.disabled = true;
      
      // Company name input
      companyNameInput.addEventListener('input', (e) => {
        companyName = e.target.value.trim();
        step1Next.disabled = companyName.length < 2;
        if (companyDisplay) companyDisplay.textContent = companyName || 'your company';
        if (companyDisplay2) companyDisplay2.textContent = companyName || 'your company';
      });
      
      // Handle Enter key in company name input
      companyNameInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && companyName.length >= 2) {
          goToStep(2);
        }
      });
      
      // Team size selection
      teamSizeOptions.forEach(option => {
        option.addEventListener('click', function() {
          // Remove selected class from all options
          teamSizeOptions.forEach(opt => opt.classList.remove('selected'));
          
          // Add selected class to clicked option
          this.classList.add('selected');
          
          teamSize = this.dataset.size;
          step2Next.disabled = false;
        });
      });
      
      // Step 1 to Step 2
      step1Next.addEventListener('click', () => goToStep(2));
      
      // Step 2 to Step 3 (Email Collection)
      step2Next.addEventListener('click', () => goToStep(3));
      
      // Back to Step 2 (from email)
      const backToStep2 = document.getElementById('back-to-step-2');
      if (backToStep2) {
        backToStep2.addEventListener('click', () => goToStep(2));
      }
      
      // Step 3 to Step 4 (Plans)
      const step3Next = document.getElementById('step-3-next');
      if (step3Next) {
        step3Next.addEventListener('click', () => {
          const email = document.getElementById('email')?.value.trim();
          if (email && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            goToStep(4);
          } else {
            alert('Please enter a valid email address');
          }
        });
      }
      
      // Back to Step 3 (from plans)
      const backToStep3 = document.getElementById('back-to-step-3');
      if (backToStep3) {
        backToStep3.addEventListener('click', () => goToStep(3));
      }
      
      // Plan selection
      planSelectBtns.forEach(btn => {
        btn.addEventListener('click', async function() {
          selectedPlan = this.dataset.plan;
          await handlePlanSelection(companyName, teamSize, selectedPlan);
        });
      });
    }
    
    // Navigation function
    function goToStep(stepNumber) {
      // Hide all steps first
      for (let i = 1; i <= 4; i++) {
        const stepEl = document.getElementById(`step-${i}`);
        if (stepEl) {
          stepEl.classList.add('hidden');
        }
      }
      
      // Show the target step
      const newStepEl = document.getElementById(`step-${stepNumber}`);
      if (newStepEl) {
        newStepEl.classList.remove('hidden');
        
        // Scroll to top of the page
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
      
      // Update progress and UI state
      switch(stepNumber) {
        case 1:
          updateProgress(33, 'Company Name');
          document.body.style.overflow = 'auto';
          document.getElementById('step-1').classList.add('flex', 'flex-col', 'lg:flex-row', 'lg:justify-between', 'lg:items-center');
          document.getElementById('step-1').classList.remove('lg:flex-col', 'lg:justify-center', 'lg:items-start');
          document.getElementById('step-1-image').classList.remove('hidden');
          break;
        case 2:
          updateProgress(66.66, 'Team Size');
          document.body.style.overflow = 'auto';
          break;
        case 3:
          updateProgress(75, 'Contact Information');
          document.body.style.overflow = 'hidden';
          // Reset email input when coming back to this step
          const emailInput = document.getElementById('email');
          const step3NextBtn = document.getElementById('step-3-next');
          if (emailInput) emailInput.value = '';
          if (step3NextBtn) step3NextBtn.disabled = true;
          break;
        case 4:
          updateProgress(100, 'Select Plan');
          document.body.style.overflow = 'auto';
          updatePricingRecommendation();
          break;
      }
      
      currentStep = stepNumber;
    }
    
    // Update progress bar and step indicator
    function updateProgress(percent, stepName) {
      if (progressBar) progressBar.style.width = `${percent}%`;
      if (currentStepDisplay) currentStepDisplay.textContent = Math.ceil(percent / 33);
      if (stepTitle) stepTitle.textContent = stepName;
    }
    
    // Initialize the UI
    initUI();
    
    // Initialize email validation
    const emailInput = document.getElementById('email');
    const step3NextBtn = document.getElementById('step-3-next');
    
    if (emailInput && step3NextBtn) {
      step3NextBtn.disabled = true; // Disable by default
      emailInput.addEventListener('input', () => {
        const email = emailInput.value.trim();
        const isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        step3NextBtn.disabled = !isValid;
      });
    }
    
    // Handle plan selection
    async function handlePlanSelection(company, teamSize, plan) {
      try {
        // Here you would typically send the data to your backend
        console.log('Selected plan:', { company, teamSize, plan });
        
        // Send data to Google Sheets (optional)
        await sendToGoogleSheets(company, teamSize, plan);
        
        // Redirect based on plan
        const planUrls = {
          'starter': 'https://app.selora.ai/signup/starter',
          'standard': 'https://app.selora.ai/signup/standard',
          'enterprise': 'https://app.selora.ai/contact-sales'
        };
        
        window.location.href = planUrls[plan] || 'https://app.selora.ai';
      } catch (error) {
        console.error('Error handling plan selection:', error);
        alert('There was an error processing your selection. Please try again.');
      }
    }
    
    // Set recommended plan based on team size
    function setRecommendedPlan(teamSize) {
      // Remove highlight from all plans
      document.querySelectorAll('.plan-card').forEach(card => {
        card.classList.remove('border-indigo-500', 'ring-2', 'ring-indigo-500', 'ring-offset-2');
      });
      
      // Determine which plan to highlight based on team size
      let planToHighlight;
      if (teamSize === '1-20') {
        planToHighlight = document.querySelector('[data-plan="starter"]');
      } else if (teamSize === '20-100') {
        planToHighlight = document.querySelector('[data-plan="standard"]');
      } else if (teamSize === '100+') {
        planToHighlight = document.querySelector('[data-plan="enterprise"]');
      }
      
      // Add highlight to the recommended plan
      if (planToHighlight) {
        planToHighlight.classList.add('border-indigo-500', 'ring-2', 'ring-indigo-500', 'ring-offset-2');
        // Scroll to the recommended plan
        setTimeout(() => {
          planToHighlight.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
        }, 100);
      }
      // Show the recommended badge for the appropriate plan
      if (teamSize === '1-20') {
        document.getElementById('starter-recommended').classList.remove('hidden');
        selectPlan('starter');
      } else if (teamSize === '20-100') {
        document.getElementById('professional-recommended').classList.remove('hidden');
        selectPlan('professional');
      } else if (teamSize === '100+') {
        document.getElementById('enterprise-recommended').classList.remove('hidden');
        selectPlan('enterprise');
      }
    }
    
    // Handle plan selection
    window.selectPlan = function(plan) {
      // Remove selected state from all plans
      document.querySelectorAll('.pricing-card').forEach(card => {
        card.classList.remove('border-purple-600', 'ring-2', 'ring-purple-200');
        card.classList.add('border-gray-200');
      });
      
      // Add selected state to chosen plan
      const selectedCard = document.getElementById(`${plan}-plan`);
      if (selectedCard) {
        selectedCard.classList.add('border-purple-600', 'ring-2', 'ring-purple-200');
        selectedCard.classList.remove('border-gray-200');
      }
      
      // Update selected plan
      selectedPlan = plan;
      
      // Update the complete signup button
      const completeBtn = document.getElementById('complete-signup');
      if (completeBtn) {
        completeBtn.disabled = false;
        completeBtn.textContent = plan === 'enterprise' ? 'Contact Sales' : 'Get Started';
      }
    };
    
    // Handle final submission
    window.completeSignup = async function() {
      if (!selectedPlan) return;
      
      const button = document.getElementById('complete-signup');
      const originalText = button.innerHTML;
      
      try {
        // Show loading state
        button.disabled = true;
        button.innerHTML = `
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Processing...
        `;
        
        // Show email collection step
        document.getElementById('step-3').classList.add('hidden');
        document.getElementById('step-4').classList.remove('hidden');
        updateProgress(100, 'Contact Information');
        
        // Set up email submission
        const emailInput = document.getElementById('email');
        const submitForm = document.getElementById('submit-form');
        
        // Enable/disable submit button based on email validation
        const validateEmail = () => {
          const email = emailInput.value.trim();
          const isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
          submitForm.disabled = !isValid;
        };
        
        emailInput.addEventListener('input', validateEmail);
        
        // Handle form submission
        const handleSubmit = async () => {
          try {
            submitForm.disabled = true;
            submitForm.innerHTML = 'Saving...';
            
            // Send data to your API
            const response = await fetch('https://api.seloraa.com/submit-onboarding', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${import.meta.env.PUBLIC_API_KEY}`
              },
              body: JSON.stringify({
                company: companyName,
                teamSize,
                plan: selectedPlan,
                email: emailInput.value.trim(),
                timestamp: new Date().toISOString()
              })
            });

            if (!response.ok) throw new Error('Failed to submit form');
            
            // Redirect to company signup with pre-filled data
            const email = emailInput.value.trim();
            window.location.href = `https://app.seloraa.com/company-signup?company=${encodeURIComponent(companyName)}&email=${encodeURIComponent(email)}`;
          } catch (error) {
            console.error('Error submitting form:', error);
            alert('There was an error submitting your information. Please try again.');
            submitForm.disabled = false;
            submitForm.innerHTML = 'Complete Signup <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
          }
        };
        
        // Add event listeners
        submitForm.addEventListener('click', handleSubmit);
        emailInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter' && !submitForm.disabled) {
            handleSubmit();
          }
        });
        
        // Back to step 3 (pricing)
        document.getElementById('back-to-step-3').addEventListener('click', () => {
          document.getElementById('step-4').classList.add('hidden');
          document.getElementById('step-3').classList.remove('hidden');
          updateProgress(66.66, 'Select Your Plan');
        });
        
      } catch (error) {
        console.error('Error:', error);
        button.innerHTML = 'Error! Try Again';
        button.disabled = false;
        setTimeout(() => {
          button.innerHTML = originalText;
        }, 2000);
      }
    };
    
    // Initialize the UI
    initUI();
    updateProgress(33, 'Company Name');
    
    function goToStep(stepNumber) {
      // Hide current step
      const currentStepEl = document.getElementById(`step-${currentStep}`);
      currentStepEl.classList.add('slide-out');
      
      setTimeout(() => {
        currentStepEl.classList.add('hidden');
        currentStepEl.classList.remove('slide-out');
        
        // Show new step
        const newStepEl = document.getElementById(`step-${stepNumber}`);
        newStepEl.classList.remove('hidden');
        
        // Update step-specific content
        if (stepNumber === 2) {
          document.getElementById('company-display').textContent = companyName;
        } else if (stepNumber === 3) {
          document.getElementById('company-display-2').textContent = companyName;
          updatePricingRecommendation();
        }
        
        currentStep = stepNumber;
      }, 250);
    }
    
    function updatePricingRecommendation() {
      const starterPlan = document.getElementById('starter-plan');
      const professionalPlan = document.getElementById('professional-plan');
      const enterprisePlan = document.getElementById('enterprise-plan');
      
      // Reset all plans
      [starterPlan, professionalPlan, enterprisePlan].forEach(plan => {
        plan.classList.remove('dimmed', 'highlighted');
      });
      
      // Highlight recommended plan based on team size
      switch (teamSize) {
        case 'small':
          starterPlan.classList.add('highlighted');
          professionalPlan.classList.add('dimmed');
          enterprisePlan.classList.add('dimmed');
          break;
        case 'medium':
          starterPlan.classList.add('dimmed');
          professionalPlan.classList.add('highlighted');
          enterprisePlan.classList.add('dimmed');
          break;
        case 'large':
          starterPlan.classList.add('dimmed');
          professionalPlan.classList.add('highlighted');
          enterprisePlan.classList.add('dimmed');
          break;
        case 'enterprise':
          starterPlan.classList.add('dimmed');
          professionalPlan.classList.add('dimmed');
          enterprisePlan.classList.add('highlighted');
          break;
      }
    }
    
    async function sendToGoogleSheets(company, teamSize, plan) {
      try {
        // For demo purposes, we'll simulate a successful submission
        return new Promise(resolve => {
          setTimeout(() => resolve(true), 1000);
        });
      } catch (error) {
        console.error('Error sending data to Google Sheets:', error);
        // Continue with the flow even if logging fails
      }
    }
    
    async function submitOnboardingData(company, teamSize, plan) {
      try {
        // Here you would typically send the data to your backend
        console.log('Submitting onboarding data:', { company, teamSize, plan });
        
        // Example: Send to your API endpoint (uncomment and configure as needed)
        /*
        const response = await fetch('YOUR_API_ENDPOINT', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            company,
            teamSize,
            plan,
            timestamp: new Date().toISOString()
          })
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const result = await response.json();
        console.log('Success:', result);
        */
        
        // For demo purposes, we'll simulate a successful submission
        return new Promise(resolve => {
          setTimeout(() => resolve(true), 1000);
        });
      } catch (error) {
        console.error('Error submitting onboarding data:', error);
        throw error;
      }
    }
  });
</script>